{"mappings":"kPACO,SAASA,EAAmBC,GAC/B,IAAMC,EACL,2EAGH,OAAOD,EAAIE,KAAI,SAAAC,G,IAAGC,EAAYD,EAAZC,aAAcC,EAAaF,EAAbE,cAAeC,EAAIH,EAAJG,KAAMC,EAAKJ,EAALI,MAAOC,EAAKL,EAALK,MAAOC,EAAQN,EAARM,SAAUC,EAASP,EAATO,U,MAC3E,iCAC8BC,OADGN,GAAiBJ,EAAa,kEACKU,OAAtCP,GAAgBH,EAAa,WAGrCU,OAH8CL,GAAQ,UAAU,2HAMhEK,OAHAJ,GAAS,IAAI,2EAMVI,OAHHH,GAAS,IAAI,8EAMTG,OAHDF,GAAY,IAAI,+EAGEE,OAAjBD,GAAa,IAAI,+C,IAI3CE,KAAK,G,gTCxBT,IAAAC,EAAAC,EAAA,S,0BAGMC,EAAW,2B,SAGKC,EAAcC,EAAMC,G,OAApBC,EAAaC,MAAAC,KAAAC,U,UAAbH,I,OAAAA,EAAfI,EAAAV,EAAA,CAAAU,EAAAC,GAAAC,MAAA,SAAAC,EAA6BT,EAAMC,G,IAEjCS,EAUDC,E,yEAVCD,EAAS,IAAIE,gBAAgB,CAClCC,IAAK,qCACLC,EAAGb,EACHc,WAAY,QACZC,YAAa,aACbC,YAAY,EACZjB,KAAMA,EACNkB,SAAUC,I,SAGOC,EAAAC,QAAMC,IAAI,GAAe5B,OAAZI,EAAS,KAAUJ,OAAPgB,I,cAAtCC,EAAIY,EAAAC,K,kBACHb,G,4CAb0BR,MAAAC,KAAAC,U,+BCE7BoB,EAAaC,SAASC,cAAc,gBACpCC,EAAUF,SAASC,cAAc,YACjCE,EAAUH,SAASC,cAAc,aACjCG,EAASJ,SAASC,cAAc,SAGhCR,EAAU,GACZY,EAAW,EAEXC,EAAa,GACbC,EAAW,IAAI3B,EAAA4B,GAAJ,CAAmB,cAK5BC,EAAW,IAAIC,sBAmCrB,SAAyBC,GACrBA,EAAQC,SAAQ,SAACC,GACTA,EAAMC,gBAGNzC,EAFAgC,GAAY,EAEYC,GAAYS,MAAK,SAACC,GAE/C,IAAMC,EAAS7D,EAAmB4D,EAASE,KAAKC,MACjDjB,EAAQkB,mBAAmB,YAAaH,GACxCV,EAASc,UAEGL,EAASE,KAAKI,YAAcpB,EAAQqB,SAASC,SACrCpB,EAAOqB,UAAUC,QAAQ,YAAa,aAEpDjB,EAASkB,UAAUxB,G,IAG1ByB,OAAM,SAACC,G,OAAMjD,EAAAkD,GAASC,OAAOC,QAAQ,2E,SAvD1B,CACdC,WAAY,UAKWlC,EAAdmC,iBAAiB,UAiB5B,SAA4BC,GAMkB,GAL1CA,EAAIC,iBACoBlC,EAAhBmC,UAAU,GACG/B,EAAV6B,EAAIG,OAAOC,SAAS,GAAGC,MACrBnC,EAAH,EAEU,KAAhBC,GAAuC,MAAfA,EAE5B,OADAJ,EAAQmC,UAAY,GACbzD,EAAAkD,GAASC,OAAOC,QAAS,kCAtBlC3D,EAAcgC,EAAUC,GAAYS,MAAK,SAACC,GAExC,GAAIA,EAASE,KAAKI,WAAa,EAAG,CAChC1C,EAAAkD,GAASC,OAAOU,QAAQ,oBAA4CzE,OAAxBgD,EAASE,KAAKI,UAAU,aACnE,IAAML,EAAS7D,EAAmB4D,EAASE,KAAKC,MACjDjB,EAAQkB,mBAAmB,YAAaH,GACxCV,EAASc,UACPZ,EAASiC,QAAQvC,E,MAEnBvB,EAAAkD,GAASC,OAAOC,QAAQ,2E,IAGzBJ,OAAM,SAACC,G,OAAMjD,EAAAkD,GAASC,OAAOC,QAAQ,2E","sources":["src/js/createMarkup.js","src/js/fetchAPI-infinitiScroll.js","src/js/infiniti-scroll.js"],"sourcesContent":["\nexport function createMarkupInList(arr) {\n    const defaults={\nURL: 'http://www.palmares.lemondeduchiffre.fr/images/joomlart/demo/default.jpg'\n    }\n    \n  return arr.map(({ webformatURL, largeImageURL, tags, likes, views, comments, downloads }) =>\n    `<a class=\"gallery_link\" href=\"${largeImageURL || defaults.URL}\"><div class=\"photo-card\">\n      <img class='img-card'src=\"${webformatURL || defaults.URL}\" alt=\"${tags || 'No tags'}\" loading=\"lazy\" height= '200px'/>\n      <div class=\"info\">\n        <p class=\"info-item\">\n          <b>Likes: </b>${likes || '-'}\n        </p>\n        <p class=\"info-item\">\n          <b>Views: </b>${views || '-'}\n        </p>\n        <p class=\"info-item\">\n          <b>Comments: </b>${comments || '-'}\n        </p>\n        <p class=\"info-item\">\n          <b>Downloads: </b>${downloads || '-'}\n        </p>\n      </div>\n    </div></a>`\n  ).join('');\n}","import axios from \"axios\";\nimport { perPage } from './infiniti-scroll';\n\nconst BASE_URL = 'https://pixabay.com/api/';\n\n//ств запиту на api\nexport async function fetchCardsAll(page, valueInput) {\n\n   const params = new URLSearchParams({\n    key: '39154877-9df82b17a56e0efc5c16aca53',\n    q: valueInput,\n    image_type: 'photo',\n    orientation: 'horizontal',\n    safesearch: true,\n    page: page,\n    per_page: perPage,\n      });\n \n  const resp = await axios.get(`${BASE_URL}?${params}`);\n  return resp\n  //  .then((resp) => resp)\n  //   .catch((_) => Notiflix.Notify.warning('Sorry, there are no images matching your search query. Please try again.'))\n};\n\n\n\n\n\n","import {createMarkupInList} from './createMarkup'\n// import axios from \"axios\";\nimport {fetchCardsAll} from './fetchAPI-infinitiScroll'\nimport Notiflix from 'notiflix';\nimport SimpleLightbox from \"simplelightbox\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\nimport '../css/style.css'\n\nconst searchForm = document.querySelector('.search-form');\nconst gallery = document.querySelector('.gallery');\nconst guardEl = document.querySelector('.js-guard');\nconst textEl = document.querySelector('.text');\n\n\nconst perPage = 40;\nlet currPage = 1;\nexport {perPage}\nlet valueInput = '';\nlet lightbox = new SimpleLightbox('.gallery a');\n\nconst options = {\n  rootMargin: \"800px\",\n};\nconst observer = new IntersectionObserver(handlerLoadMore, options);\n\n// слухач подій на запит по слову\nsearchForm.addEventListener('submit', handlerClickOnForm);\n\nfunction fetchData() {\n  fetchCardsAll(currPage, valueInput).then((dataResp) => {\n\n    if (dataResp.data.totalHits >= 1) {\n      Notiflix.Notify.success(`Hooray! We found ${dataResp.data.totalHits} images.`);\n       const markup = createMarkupInList(dataResp.data.hits);\n      gallery.insertAdjacentHTML('beforeend', markup);\n      lightbox.refresh();\n        observer.observe(guardEl);\n    } else {\n      Notiflix.Notify.warning('Sorry, there are no images matching your search query. Please try again.')\n    }\n  })\n    .catch((_) => Notiflix.Notify.warning('Sorry, there are no images matching your search query. Please try again.'))\n}\nfunction handlerClickOnForm(evt) {\n    evt.preventDefault();//відміна перезагру сторінки\n    gallery.innerHTML=''; // зачистка при новому пошуку\n  valueInput = evt.target.elements[0].value; // те що ввів клієнт\n   currPage = 1; // При новому пошуку повертаємося на першу сторінку\n   \n    if ((valueInput === '') || (valueInput === ' ')) {\n    gallery.innerHTML = '';\n    return Notiflix.Notify.warning(`Sorry, you must enter a value.`);\n  }\n    fetchData()    //  запит на API\n}\n\n\n\nfunction handlerLoadMore(entries) {\n    entries.forEach((entry) => { \n        if (entry.isIntersecting) {\n            currPage += 1;\n          \n            fetchCardsAll(currPage, valueInput).then((dataResp) => {\n\n       const markup = createMarkupInList(dataResp.data.hits);\n      gallery.insertAdjacentHTML('beforeend', markup);\n      lightbox.refresh();\n\n              if (dataResp.data.totalHits === gallery.children.length) {\n                          textEl.classList.replace('is-hidden', 'no-hidden');\n\n            observer.unobserve(guardEl);\n                };\n  })\n    .catch((_) => Notiflix.Notify.warning('Sorry, there are no images matching your search query. Please try again.'))\n\n        }\n    })\n}"],"names":["$7406f4e6957bfce5$export$1322211cc48fbc3b","arr","defaults","map","param","webformatURL","largeImageURL","tags","likes","views","comments","downloads","concat","join","$bpxeT","parcelRequire","$77c3c17d0b0c3d9d$var$BASE_URL","$77c3c17d0b0c3d9d$export$79675483ce1a9b5f","page","valueInput","$77c3c17d0b0c3d9d$var$_fetchCardsAll","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","params","resp","URLSearchParams","key","q","image_type","orientation","safesearch","per_page","$c6b405435e09e54e$export$6cfc372de9b933a","$dIxxU","default","get","_ctx","sent","$c6b405435e09e54e$var$searchForm","document","querySelector","$c6b405435e09e54e$var$gallery","$c6b405435e09e54e$var$guardEl","$c6b405435e09e54e$var$textEl","$c6b405435e09e54e$var$currPage","$c6b405435e09e54e$var$valueInput","$c6b405435e09e54e$var$lightbox","$5IjG7","$c6b405435e09e54e$var$observer","IntersectionObserver","entries","forEach","entry","isIntersecting","then","dataResp","markup","data","hits","insertAdjacentHTML","refresh","totalHits","children","length","classList","replace","unobserve","catch","_","$6JpON","Notify","warning","rootMargin","addEventListener","evt","preventDefault","innerHTML","target","elements","value","success","observe"],"version":3,"file":"infiniti-scroll.456747f9.js.map"}